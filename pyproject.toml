# -----------------------------------------------------------------------------
# BUILD SYSTEM
# -----------------------------------------------------------------------------

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools >=64.0.0",
    "wheel >=0.40.0",
]


# -----------------------------------------------------------------------------
# PROJECT AND DEPENDENCIES
# -----------------------------------------------------------------------------

[project]
name = "nldg"
version = "0.0.1"
description = "nldg: Nonlinear Distribution Generalization"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "GNU Affero General Public License v3.0"}
authors = [{name = "Francesco Freni", email = "ffreni@student.ethz.ch"}]
keywords = ["distribution generalization", "maximin", "magging", "random forest"]
dependencies = [
    "numpy",
    "pandas",
    "scikit-learn",
    "scipy",
    "matplotlib",
    "seaborn",
    "pyyaml",
    "joblib",
    "tqdm",
    "torch",
    "statsmodels",
    "pre-commit",
    "cvxpy",
    "geopandas",
    "contextily",
    "ecos",
    "xarray",
    "netCDF4",
    "xgboost",
    "cvxopt",
    "pygam",
]

[project.optional-dependencies]
dev = [
    "black[d]",
    "coverage",
    "isort",
    "mypy",
    "pytest",
    "pytest-cov",
    "ruff",
    "types-PyYAML",
]


# -----------------------------------------------------------------------------
# TOOL CONFIGURATION
# -----------------------------------------------------------------------------

[tool.black]
line-length = 79
target-version = ['py310']

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.10"
warn_unused_ignores = true
warn_unused_configs = true
warn_return_any = true
warn_redundant_casts = true
warn_unreachable = false
ignore_missing_imports = true
disallow_untyped_calls = true
no_implicit_optional = true
disallow_untyped_defs = true

[tool.pyright]
pythonVersion = "3.10"
reportPrivateImportUsage = "none"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
]
testpaths = [
    "tests",
]
markers = [  # deselect tests with -m "not <marker>"
    "slow: unit tests that are slow",
]

[tool.ruff]
lint.select = [
    "E",  # pycodestyle rules
    "F",  # Pyflakes rules
    "B",  # flake8-bugbear rules
]
line-length = 79
target-version = "py310"

[tool.setuptools]
packages = ["nldg", "experiments", "fluxnet", "nldg.additional", "fluxnet.cv"]